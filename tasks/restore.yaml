---
# Restore tasks file for ansible-role-suricata

- name: "Collect list of Suricata systemd unit files"
  find:
    paths: /usr/lib/systemd/system
    patterns: 'ids*,suricata*'
    file_type: file
  register: output

- name: "Set fact for found Suricata systemd unit files"
  set_fact:
    systemd_services: >-
      {{ output.files
         | map(attribute='path')
         | map('basename')
         | reject('equalto', 'suricata.service')
         | list
      }}

- name: "Set fact for found Suricata Interfaces"
  set_fact:
    suricata_interfaces: "{{ suricata_interfaces | default([]) + [item.split('-')[1].split('.')[0]] }}"
  loop: "{{ systemd_services }}"

- name: "Stop Suricata daemons"
  service:
    name: "{{ item }}"
    state: stopped
  #ignore_errors: true
  loop: "{{ systemd_services }}"

- name: "Delete files in /etc/suricata"
  shell: find /etc/suricata -mindepth 1 -print -delete
  #ignore_errors: true

- name: "Collect stats of output_directory"
  stat:
    path: "{{ output_directory }}"
  register: output
  when:
    - output_directory is defined
    - output_directory is string

- name: "Delete files in output_directory"
  shell: find {{ output_directory }}/{{ item }} -mindepth 1 -print -delete
  ignore_errors: true
  loop: "{{ suricata_interfaces }}"
  when:
    - output.stat.exists
    - output.stat.isdir

- name: "Restore backup of /etc/suricata"
  unarchive:
    src: "{{ archive_file }}"
    dest: /etc/suricata
    owner: "ansible"
    group: "ansible"
    remote_src: true
  #ignore_errors: true

- name: "Find files with .rpmsave extension in /etc/suricata"
  find:
    paths: /etc/suricata
    patterns: "*.rpmsave"
    file_type: file
  register: rpmsave_files

- name: "Rename .rpmsave files by removing the extension"
  command: mv "{{ item.path }}" "{{ item.path | regex_replace('\.rpmsave$', '') }}"
  loop: "{{ rpmsave_files.files }}"
  when: rpmsave_files.matched > 0

- name: "Force systemd to reread configs"
  systemd:
    daemon_reload: true

- name: "Start Suricata IDS interface daemons"
  service:
    name: "{{ item }}"
    state: started
  ignore_errors: true
  loop: "{{ systemd_services }}"
